{"version":3,"file":"migl-rest-client.mjs","sources":["../../../projects/migl-rest-client/src/lib/migl-rest-client.config.ts","../../../projects/migl-rest-client/src/lib/migl-rest-client.service.ts","../../../projects/migl-rest-client/src/lib/migl-rest-client.module.ts","../../../projects/migl-rest-client/src/public-api.ts","../../../projects/migl-rest-client/src/migl-rest-client.ts"],"sourcesContent":["export class RestServiceConfig {\n    public endPoint?: string;\n    public mockData?: boolean;\n    public tokenStorage?: 'cookie' | 'localStorage';\n    public tokenName?: string;\n    public secureCookie?: boolean;\n    public cookieExpires?: number;\n    public authUri?: string;\n    public validationTokenUri?: string;\n}\n","import * as FileSaver from 'file-saver';\nimport { Injectable, Optional } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { CookieService } from 'ngx-cookie';\n\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil, delay, map, tap } from 'rxjs/operators';\n\nimport { RestServiceConfig } from './migl-rest-client.config';\n\nexport declare type HttpObserve = 'body' | 'events' | 'response';\n\nexport declare interface HttpOptions {\n    body?: any;\n    headers?: HttpHeaders | {\n        [header: string]: string | string[];\n    };\n    params?: HttpParams | {\n        [param: string]: string | string[];\n    };\n    observe?: HttpObserve;\n    reportProgress?: boolean;\n    responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\n    withCredentials?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RestClientService {\n\n    /**\n     * Handler used to stop all pending requests\n     */\n    protected cancelPending$: Subject<boolean> = new Subject<boolean>();\n\n    /**\n     * Default requests header\n     */\n    protected _baseHeader = {\n        'accept'        : 'application/json',\n        'Cache-Control' : 'no-cache',\n        'Pragma'        : 'no-cache',\n        'Authorization' : ''\n    };\n\n    /**\n     * When true, the request header will include the authentication token\n     */\n    protected _secureRequest = false;\n\n    /**\n     * Rest API end point\n     *\n     * This value will be prepend to the request URL\n     */\n    protected _endPoint = '';\n\n    /**\n     * API Authorization URI\n     */\n    protected _authUri = '/authorize';\n\n    /**\n     * API Token Validation URI\n     */\n    protected _validateTokenUri = '/validate-token';\n\n    /**\n     * Enable the Mock Data mode\n     *\n     * When Mock Data is enabled\n     */\n    protected _mockData = false;\n\n    /**\n     * Name where the authorization token will be save\n     */\n    protected _tokenName = 'AuthToken';\n\n    /**\n     * Name where the authorization token will be save\n     */\n    protected _tokenStorage = 'cookie';\n\n    /**\n     * Set the expiration DateTime in minutes\n     *\n     * The value in minutes will be add to Datetime when the cookie is set\n     */\n    protected _cookieExpires: number = 1440 * 7;\n\n    /**\n     * When true, cookies operation will be allow only when HTTPS is use\n     */\n    protected _secureCookie = false;\n\n    /**\n     * Holds a list of files to be upload on request\n     */\n    protected _withFiles = false;\n\n    /**\n     * Service class constructor\n     */\n    constructor(\n        private http: HttpClient,\n        private cookies: CookieService,\n        @Optional() config: RestServiceConfig\n    ) {\n        if (config) {\n            if ( config.endPoint ) { this._endPoint = config.endPoint; }\n            if ( config.tokenName ) { this._tokenName = config.tokenName; }\n            if ( config.tokenStorage ) { this._tokenName = config.tokenStorage; }\n            if ( config.secureCookie ) { this._secureCookie = config.secureCookie; }\n            if ( config.mockData ) { this._mockData = config.mockData; }\n            if ( config.cookieExpires ) { this._cookieExpires = config.cookieExpires; }\n        }\n    }\n\n    /**\n     * Set the Rest Client configuration parameters.\n     *\n     * CAUTION: This method override the current configuration settings\n     * and this settings will apply to all following requests\n     */\n    public configure( config: RestServiceConfig ): RestClientService {\n        if ( config.endPoint ) { this._endPoint = config.endPoint; }\n        if ( config.tokenName ) { this._tokenName = config.tokenName; }\n        if ( config.tokenStorage ) { this._tokenName = config.tokenStorage; }\n        if ( config.secureCookie ) { this._secureCookie = config.secureCookie; }\n        if ( config.mockData ) { this._mockData = config.mockData; }\n        if ( config.cookieExpires ) { this._cookieExpires = config.cookieExpires; }\n        return this;\n    }\n\n    /**\n     * Get the API Token from cookies\n     */\n    public getToken(): string {\n        let token;\n\n        switch ( this._tokenStorage ) {\n            case 'cookie':\n                token = this.cookies.get( this._tokenName );\n                break;\n            case 'localStorage':\n                let storageData = localStorage.getItem(this._tokenName);\n                if (storageData) {\n                    token = JSON.parse(storageData);\n                }\n                break;\n            default:\n                throw new Error('Invalid Token Storage method');\n        }\n\n        return !token || typeof token === 'undefined' ? '' : token;\n    }\n\n    /**\n     * Request an Authorization token\n     *\n     * The default authorization URI is '[API_END_POINT]/authorize'\n     */\n    public authorize( UserName: string, Password: string ): Observable<any> {\n        return this.request('post', this._authUri, { username: UserName, password: Password })\n            .pipe(tap((data) => {\n                this.setToken(data.token);\n            }));\n    }\n\n    /**\n     * Validate the Authentication token against the API\n     */\n    public validateToken(): Observable<any> {\n        return this.request('post', this._validateTokenUri);\n    }\n\n    /**\n     * Remove the Authentication token cookie\n     */\n    public revoke(): void {\n        switch ( this._tokenStorage ) {\n            case 'cookie':\n                this.cookies.removeAll();\n                break;\n            case 'localStorage':\n                localStorage.removeItem(this._tokenName);\n                break;\n            default:\n                throw new Error('Invalid Token Storage method');\n        }\n    }\n\n    /**\n     * Check if the client is already Authenticate\n     */\n    public isAuthorized(): boolean {\n        return this.getToken() !== '';\n    }\n\n    /**\n     * Cancel all pending requests\n     */\n    public cancelPendingRequests(): void {\n        this.cancelPending$.next(true);\n    }\n\n    /**\n     * API request using GET method\n     */\n    public get(url: string, data?: {}): Observable<any> {\n        return this.request('get', url, data);\n    }\n\n    /**\n     * API request using POST method\n     */\n    public post(\n        url: string, data?: {}, responseType?: string, httpOptions: HttpOptions = {}\n    ): Observable<any> {\n        return this.request('post', url, data, responseType, httpOptions);\n    }\n\n    /**\n     * API request using PUT method\n     */\n    public put(\n        url: string, data?: {}, responseType?: string, httpOptions: HttpOptions = {}\n    ): Observable<any> {\n        return this.request('put', url, data, responseType, httpOptions);\n    }\n\n    /**\n     * Set the upload file mode\n     */\n    public withFiles( ): RestClientService {\n        this._withFiles = true;\n        return this;\n    }\n\n    /**\n     * API request using DELETE method\n     */\n    public delete(url: string, data?: {}, responseType?: string): Observable<any> {\n        return this.request('delete', url, data, responseType);\n    }\n\n    /**\n     * Set the request mode to SECURED for the next request.\n     *\n     * Secured Mode force the next request to include the authentication token.\n     * The token must be requested previously using the \"authorize\" method.\n     */\n    public secured() {\n        this._secureRequest = true;\n        return this;\n    }\n\n    /**\n     * Set the request mode to PUBLIC for the next request.\n     *\n     * Public is the default request mode and ensure that no authentication token\n     * will be pass on the next request.\n     */\n    public public() {\n        this._secureRequest = false;\n        return this;\n    }\n\n    /**\n     * Request a file from endpoint and pass the authenticate token if required\n     */\n    public download( url: string, fileName: string, mime: string, data?: {}): Observable<any> {\n        // const msDelay = Math.floor((Math.random() * 2000) + 1000);\n        const header = JSON.parse(JSON.stringify(this._baseHeader));\n\n        if ( this._secureRequest ) {\n            const token = this.getToken();\n            if ( !token ) {\n                console.warn('Executing a secure request without TOKEN.');\n            } else { header.Authorization = `Bearer ${token}`; }\n            this._secureRequest = false;\n        }\n\n        const options = { responseType: ('blob' ) as 'text', params: data, headers: header };\n\n        return this.http.request( 'get', this.buildUrl(url), options )\n            .pipe(takeUntil(this.cancelPending$))\n            .pipe(map((res) => {\n                const blob = new Blob([res], { type: mime });\n                FileSaver.saveAs(blob, fileName);\n                return 'DOWNLOAD';\n            }));\n    }\n\n    /**\n     * Get the expiration Datetime for cookies\n     *\n     * Add (cookieExpires) minutes to current date\n     */\n    protected getCookieExpires(): Date {\n        const d = new Date();\n        d.setMinutes(d.getMinutes() + this._cookieExpires);\n        return d;\n    }\n\n    /**\n     * Save the API Token cookie\n     */\n    protected setToken( token: string ): void {\n        switch ( this._tokenStorage ) {\n            case 'cookie':\n                this.cookies.put(\n                    this._tokenName,\n                    token,\n                    { secure: this._secureCookie, expires: this.getCookieExpires() }\n                );\n                break;\n            case 'localStorage':\n                localStorage.setItem(this._tokenName, token);\n                break;\n            default:\n                throw new Error('Invalid Token Storage method');\n        }\n    }\n\n    /**\n     * Build a valid URL concatenating the url parameter with the ApiEndPoint\n     */\n    protected buildUrl( url: string ): string {\n        let nUrl = `${this._endPoint.replace(/\\/$/, '')}/${url.replace(/^\\//g, '')}`;\n        const match = nUrl.match(/\\.([0-9a-z]+)(?:[\\?#]|$)/i);\n\n        if ( this._mockData && match == null ) {\n            nUrl = `${nUrl}.json`;\n        }\n\n        return nUrl;\n    }\n\n    /**\n     * Create a FormData object to be send as request payload data\n     */\n    protected createFormData(object: any, form?: FormData, namespace?: string): FormData {\n        const formData = form || new FormData();\n        for (const property in object) {\n            if (!object.hasOwnProperty(property) || !object[property]) {\n                continue;\n            }\n            const formKey = namespace ? `${namespace}[${property}]` : property;\n            if (object[property] instanceof Date) {\n                formData.append(formKey, object[property].toISOString());\n            } else if (\n                typeof object[property] === 'object' && !(object[property] instanceof File)) {\n                this.createFormData(object[property], formData, formKey);\n            } else if ( object[property] instanceof FileList ) {\n                formData.append(`${property}[]`, object[property]);\n            } else {\n                formData.append(formKey, object[property]);\n            }\n        }\n        return formData;\n    }\n\n    /**\n     * Raw request method\n     */\n\n    protected request(\n        method: string, url: string, data?: any, responseType?: string,\n        httpOptions: HttpOptions = {}\n    ): Observable<any> {\n        const msDelay = Math.floor((Math.random() * 2000) + 1000);\n        const header = JSON.parse(JSON.stringify(this._baseHeader));\n\n        if ( this._secureRequest ) {\n            const token = this.getToken();\n            if ( !token ) {\n                console.warn(\n                    'Executing a secure request without TOKEN. '\n                    + 'Authorization header will not be set!'\n                );\n            } else { header.Authorization = `Bearer ${token}`; }\n            this._secureRequest = false;\n        }\n\n        const rType = (responseType ? responseType : 'json' ) as 'text';\n        const options = {\n            body: method.toLowerCase() === 'get'\n                ? {}\n                : ( this._withFiles ? this.createFormData( data ) : data ),\n            responseType: rType,\n            params: method.toLowerCase() === 'get' ? data : {},\n            headers: header\n        };\n\n        this._withFiles = false;\n\n        return this.http\n            .request(\n                this._mockData ? 'get' : method, this.buildUrl(url),\n                { ...options, ...httpOptions }\n            )\n            .pipe(takeUntil(this.cancelPending$))\n            .pipe(delay( this._mockData ? msDelay : 0 ));\n    }\n}\n","import { ModuleWithProviders, NgModule} from '@angular/core';\nimport { CookieModule, CookieService } from 'ngx-cookie';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\n\nimport { RestClientService } from './migl-rest-client.service';\nimport { RestServiceConfig } from './migl-rest-client.config';\n\n@NgModule({\n    imports: [\n        HttpClientModule,\n        CookieModule.forRoot()\n    ],\n    providers: [\n        HttpClient,\n        CookieService,\n        RestClientService\n    ]\n})\nexport class RestClientModule {\n    public static forRoot( config?: RestServiceConfig ): ModuleWithProviders<RestClientModule> {\n        return {\n            ngModule: RestClientModule,\n            providers: [\n                {provide: RestServiceConfig, useValue: config }\n            ]\n        };\n    }\n}\n","/*\n * Public API Surface of migl-rest-client\n */\n\nexport * from './lib/migl-rest-client.config';\nexport * from './lib/migl-rest-client.service';\nexport * from './lib/migl-rest-client.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}